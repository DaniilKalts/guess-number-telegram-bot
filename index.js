require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");

const sequelize = require("./utils/db");
const UserModel = require("./models/user.model");
const {
  sendMessageWithSticker,
  getFormattedNumber,
  gamesPlayedPrefix,
} = require("./utils/utils");
const {
  reinitializeAttempts,
  handleNewNumber,
} = require("./utils/guess-number");

const chats = {};

let isPlaying = false;
let isAskingForSupport = false;

const bot = new TelegramBot(process.env.BOT_API_KEY, { polling: true });
const requestBot = new TelegramBot(process.env.REQUEST_BOT_API_KEY, {
  polling: true,
});

try {
  sequelize.sync();
  console.log("–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ë–î");
} catch (err) {
  console.log(err);
}

const { menuCommands, menuCommandsReplies } = require("./utils/commands");
bot.setMyCommands(menuCommands);

bot.on("message", async (ctx) => {
  const text = ctx.text;
  const chatId = ctx.chat.id;

  if (isAskingForSupport) {
    isAskingForSupport = false;

    let userName = "";
    if (ctx.from.username) {
      userName = `@${ctx.from.username}`;
    } else {
      userName = ctx.from.first_name;
    }

    const now = new Date();

    await requestBot.sendMessage(
      process.env.MY_USER_ID,
      `
        <b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} 
        \nüìÖ –î–∞—Ç–∞: ${now.toLocaleDateString("ru-RU")} 
        \n‚åö –í—Ä–µ–º—è: ${getFormattedNumber(now.getHours())}:${getFormattedNumber(
        now.getMinutes()
      )}:${getFormattedNumber(now.getSeconds())}
        \n‚úâ –°–æ–æ–±—â–µ–Ω–∏–µ: ${text}
        </b>
      `,
      {
        parse_mode: "HTML",
      }
    );

    return bot.sendMessage(
      chatId,
      "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ! ‚úÖ \n–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã."
    );
  }

  // If the number is between 1...10 and the game is on, handle message.
  if (parseInt(text) > 0 && parseInt(text) < 11 && isPlaying) {
    const data = parseInt(text);

    if (isPlaying) {
      handleNewNumber(bot, ctx, chatId, data, chats[chatId], false);
    }

    if (data === chats[chatId]) {
      isPlaying = false;
    }

    return;
  }

  // Handle different commands
  if (text === "/start") {
    const user = await UserModel.findOne({
      where: {
        chatId: chatId,
      },
    });

    if (!user) {
      let name = "";
      if (ctx.from.username) {
        name = `@${ctx.from.username}`;
      } else {
        name = ctx.from.first_name;
      }
      await UserModel.create({ chatId, userName: name });
    }

    return sendMessageWithSticker(
      bot,
      chatId,
      menuCommandsReplies[text].stickerURL,
      !user
        ? menuCommandsReplies[text].message1
        : menuCommandsReplies[text].message2
    );
  } else if (text === "/game") {
    const user = await UserModel.findOne({
      where: {
        chatId: chatId,
      },
    });
    user.gamesPlayed++;
    await user.save();

    // Set variables to initial state
    isPlaying = true;
    reinitializeAttempts();

    // Get random Number
    const randomNumber = Math.floor(Math.random() * 10) + 1;
    chats[chatId] = randomNumber;

    sendMessageWithSticker(
      bot,
      chatId,
      menuCommandsReplies[text].stickerURL,
      menuCommandsReplies[text].message
    );

    const gameOptions = require("./utils/game-options");

    return bot.sendMessage(chatId, "–ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!)", {
      reply_markup: {
        inline_keyboard: gameOptions,
        resize_keyboard: true,
      },
    });
  } else if (text === "/statistic") {
    const user = await UserModel.findOne({
      where: {
        chatId: chatId,
      },
    });

    const joinedBotDate = new Date(user.createdAt);

    return sendMessageWithSticker(
      bot,
      chatId,
      menuCommandsReplies[text].stickerURL,
      `<b>‚åö –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:</b> ${joinedBotDate.toLocaleDateString(
        "ru-RU"
      )} –≤ ${getFormattedNumber(joinedBotDate.getHours())}:${getFormattedNumber(
        joinedBotDate.getMinutes()
      )}:${getFormattedNumber(joinedBotDate.getSeconds())}\n
<b>üò≤ –í—ã —Å—ã–≥—Ä–∞–ª–∏:</b> ${user.gamesPlayed} ${gamesPlayedPrefix(
        user.gamesPlayed
      )}\n
<b>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> ${user.wrongAnswers}\n
<b>üëé –ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> ${user.losses}\n
<b>üèÜ –ü–æ–±–µ–¥:</b> ${user.wins}
      `
    );
  } else if (text === "/strategy") {
    return sendMessageWithSticker(
      bot,
      chatId,
      menuCommandsReplies[text].stickerURL,
      menuCommandsReplies[text].message
    );
  } else if (text === "/support") {
    isAskingForSupport = true;
    return sendMessageWithSticker(
      bot,
      chatId,
      menuCommandsReplies[text].stickerURL,
      menuCommandsReplies[text].message
    );
  }

  return bot.sendMessage(
    chatId,
    `–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é... \n\n–ï—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—à—å, —Ç–æ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. \n\n–ï—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä—É, —Ç–æ –Ω–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É! üòÜ`
  );
});

// Callback functions, when inline keyboard is clicked
bot.on("callback_query", async (ctx) => {
  const data = parseInt(ctx.data);
  const chatId = ctx.message.chat.id;

  if (!isPlaying) {
    return bot.answerCallbackQuery(ctx.id, {
      text: "–ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É...",
    });
  }
  handleNewNumber(bot, ctx, chatId, data, chats[chatId], true);

  if (data === chats[chatId]) {
    isPlaying = false;
  }
});
